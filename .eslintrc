{
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"jsx": true,
		"useJSXTextNode": true,
		"ecmaVersion": 2018,
		"sourceType": "module",
		"project": "./tsconfig.json"
	},
	"ignorePatterns": ["/out"],
	"plugins": ["@typescript-eslint", "roblox-ts", "prettier", "jsdoc"],
	"extends": [
		"eslint:recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:roblox-ts/recommended",
		"plugin:prettier/recommended",
		"plugin:jsdoc/recommended-typescript",
		"plugin:react-hooks/recommended"
		//"plugin:React/recommended"
	],
	"rules": {
		"@typescript-eslint/explicit-member-accessibility": [
			"error",
			{
				"accessibility": "explicit",
				"overrides": {
					"constructors": "no-public"
				}
			}
		],
		"@typescript-eslint/explicit-function-return-type": [
			"error",
			{
				"allowExpressions": true,
				"allowTypedFunctionExpressions": true,
				"allowHigherOrderFunctions": true
			}
		],
		"jsdoc/check-tag-names": 0,
		"jsdoc/require-jsdoc": 0,
		"spaced-comment": "warn",
		"prettier/prettier": "warn",
		"@typescript-eslint/naming-convention": [
			"warn",
			{
				"selector": "typeAlias",
				"format": ["PascalCase"]
			},
			{
				"selector": "interface",
				"format": ["PascalCase"]
			},
			{
				"selector": "class",
				"format": ["PascalCase"]
			},
			{
				"selector": "variable",
				"format": ["camelCase"]
			},
			{
				"selector": "variable",
				"modifiers": ["const"],
				"format": ["UPPER_CASE", "camelCase"]
			},
			{
				"selector": "variable",
				"modifiers": ["destructured"],
				"format": null
			},
			{
				"selector": "function",
				"format": ["camelCase"]
			},
			{
				"selector": "method",
				"format": ["camelCase"]
			}
		]
	},
	"overrides": [
		{
			"files": ["*.tsx"],
			"rules": {
				"@typescript-eslint/naming-convention": [
					"warn",
					{
						"selector": "typeAlias",
						"format": ["PascalCase"]
					},
					{
						"selector": "interface",
						"format": ["PascalCase"]
					},
					{
						"selector": "class",
						"format": ["PascalCase"]
					},
					{
						"selector": "variable",
						"format": ["camelCase"]
					},
					{
						"selector": "variable",
						"modifiers": ["const"],
						"format": ["UPPER_CASE", "camelCase"]
					},
					{
						"selector": "variable",
						"modifiers": ["destructured"],
						"format": null
					},
					{
						"selector": "function",
						"format": ["camelCase", "PascalCase"]
					}
				]
			}
		}
	]
}
